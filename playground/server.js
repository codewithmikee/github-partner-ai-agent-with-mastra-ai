/**
 * @fileoverview Playground Server - Simple API server for GitHub Partner AI Playground
 * @description Provides API endpoints for the playground UI to interact with the GitHub service
 * @credits Generated by Cursor AI
 */

import express from "express";
import cors from "cors";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";
import { GitHubService } from "../src/lib/github-service.js";

// Load environment variables
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const port = process.env.PLAYGROUND_PORT || process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname)));

// Initialize GitHub service
const githubService = new GitHubService();

// Check if GitHub is configured from environment
if (githubService.isConfigured()) {
  console.log("✅ GitHub account configured from environment variables");
  const account = githubService.getCurrentAccount();
  console.log(`   Username: ${account?.username}`);
} else {
  console.log(
    "⚠️  GitHub account not configured. Use the playground UI to set credentials."
  );
}

// API Routes

/**
 * GET /api/repositories
 * Fetch all repositories for the configured account
 */
app.get("/api/repositories", async (req, res) => {
  try {
    if (!githubService.isConfigured()) {
      return res.status(400).json({
        error:
          "GitHub account not configured. Please set username and token first.",
      });
    }

    const repositories = await githubService.getAllRepositories();
    res.json({ repositories });
  } catch (error) {
    console.error("Error fetching repositories:", error);
    res.status(500).json({ error: error.message });
  }
});

/**
 * POST /api/config
 * Update GitHub account configuration
 */
app.post("/api/config", async (req, res) => {
  try {
    const { username, token } = req.body;

    if (!username || !token) {
      return res.status(400).json({
        error: "Username and token are required",
      });
    }

    githubService.setAccount(username, token);
    res.json({
      success: true,
      message: "Configuration updated successfully",
    });
  } catch (error) {
    console.error("Error updating configuration:", error);
    res.status(500).json({ error: error.message });
  }
});

/**
 * POST /api/analyze
 * Run basic codebase analysis on a repository
 */
app.post("/api/analyze", async (req, res) => {
  try {
    const { owner, repo } = req.body;

    if (!owner || !repo) {
      return res.status(400).json({
        error: "Owner and repo are required",
      });
    }

    if (!githubService.isConfigured()) {
      return res.status(400).json({
        error: "GitHub account not configured",
      });
    }

    // Get repository info
    const repositories = await githubService.getAllRepositories();
    const repository = repositories.find(
      (r) => r.name === repo && r.username === owner
    );

    if (!repository) {
      return res.status(404).json({
        error: `Repository ${owner}/${repo} not found`,
      });
    }

    // Get repository structure
    const structure = await githubService.getRepositoryStructure(owner, repo);

    // Basic analysis (simplified version)
    const analysis = {
      mainPurpose: "Web application",
      complexity:
        structure.files.length > 100
          ? "high"
          : structure.files.length > 50
          ? "medium"
          : "low",
      technologies: Object.keys(structure.languages).slice(0, 5),
      frameworks: structure.packageJsons.flatMap((pkg) =>
        Object.keys(pkg.dependencies || {}).filter((dep) =>
          ["react", "vue", "angular", "svelte", "next", "nuxt"].some((fw) =>
            dep.toLowerCase().includes(fw)
          )
        )
      ),
      patterns: [],
    };

    const insights = {
      isWellStructured: structure.directories.length > 3,
      hasTests: structure.files.some(
        (f) => f.name.includes("test") || f.name.includes("spec")
      ),
      hasDocumentation: structure.readmes.length > 0,
      modernStack:
        analysis.technologies.includes("typescript") ||
        analysis.technologies.includes("tsx"),
    };

    // Generate recommendations
    const recommendations = [];
    if (!insights.hasTests) {
      recommendations.push("Add unit tests to improve code reliability");
    }
    if (!insights.hasDocumentation) {
      recommendations.push("Add comprehensive documentation");
    }
    if (!insights.modernStack) {
      recommendations.push(
        "Consider migrating to TypeScript for better type safety"
      );
    }
    if (!insights.isWellStructured) {
      recommendations.push(
        "Improve project organization with clearer directory structure"
      );
    }

    res.json({
      repository,
      analysis,
      structure,
      insights,
      recommendations,
    });
  } catch (error) {
    console.error("Error analyzing repository:", error);
    res.status(500).json({ error: error.message });
  }
});

/**
 * GET /api/status
 * Check if GitHub service is configured
 */
app.get("/api/status", (req, res) => {
  res.json({
    configured: githubService.isConfigured(),
    account: githubService.getCurrentAccount(),
  });
});

// Serve the playground HTML
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "index.html"));
});

// Start server
app.listen(port, () => {
  console.log(
    `🚀 GitHub Partner AI Playground running at http://localhost:${port}`
  );
  console.log(`📊 API endpoints available at http://localhost:${port}/api/`);
});
