#!/usr/bin/env node

/**
 * @fileoverview Setup script for GitHub Partner AI
 * @description Interactive setup script to help developers get started quickly
 * @credits Generated by Cursor AI
 */

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import readline from "readline";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const question = (query) =>
  new Promise((resolve) => rl.question(query, resolve));

async function setup() {
  console.log("🚀 GitHub Partner AI Setup");
  console.log("========================\n");

  // Check if .env already exists
  const envPath = path.join(__dirname, ".env");
  if (fs.existsSync(envPath)) {
    const overwrite = await question(
      "⚠️  .env file already exists. Overwrite? (y/N): "
    );
    if (overwrite.toLowerCase() !== "y" && overwrite.toLowerCase() !== "yes") {
      console.log("Setup cancelled.");
      rl.close();
      return;
    }
  }

  console.log("Let's configure your GitHub Partner AI setup!\n");

  // Get GitHub username
  const username = await question("📝 GitHub Username: ");
  if (!username.trim()) {
    console.log("❌ Username is required!");
    rl.close();
    return;
  }

  // Get GitHub token
  console.log("\n🔑 GitHub Personal Access Token");
  console.log("   Generate one at: https://github.com/settings/tokens");
  console.log("   Required scopes: repo, read:user, read:org\n");
  const token = await question("📝 GitHub Token: ");
  if (!token.trim()) {
    console.log("❌ Token is required!");
    rl.close();
    return;
  }

  // Get OpenAI API key
  console.log("\n🤖 OpenAI API Key");
  console.log("   Get one at: https://platform.openai.com/api-keys\n");
  const openaiKey = await question(
    "📝 OpenAI API Key (optional, press Enter to skip): "
  );

  // Get playground port
  const playgroundPort =
    (await question("\n🌐 Playground Port (default: 3001): ")) || "3001";

  // Create .env file
  const envContent = `# GitHub Partner AI - Environment Configuration
# Generated by setup script on ${new Date().toISOString()}

# GitHub Configuration
GITHUB_USERNAME=${username.trim()}
GITHUB_TOKEN=${token.trim()}

# OpenAI Configuration
OPENAI_API_KEY=${openaiKey.trim() || "your-openai-api-key-here"}

# Server Ports
PLAYGROUND_PORT=${playgroundPort.trim()}
MASTRA_PORT=3000
`;

  try {
    fs.writeFileSync(envPath, envContent);
    console.log("\n✅ Configuration saved to .env file!");
  } catch (error) {
    console.log("❌ Error saving .env file:", error.message);
    rl.close();
    return;
  }

  // Install dependencies
  console.log("\n📦 Installing dependencies...");
  try {
    const { execSync } = await import("child_process");
    execSync("pnpm install", { stdio: "inherit", cwd: __dirname });
    console.log("✅ Dependencies installed!");
  } catch (error) {
    console.log("⚠️  Error installing dependencies:", error.message);
    console.log('   Please run "pnpm install" manually.');
  }

  // Install playground dependencies
  console.log("\n🎮 Installing playground dependencies...");
  try {
    const { execSync } = await import("child_process");
    execSync("pnpm install", {
      stdio: "inherit",
      cwd: path.join(__dirname, "playground"),
    });
    console.log("✅ Playground dependencies installed!");
  } catch (error) {
    console.log("⚠️  Error installing playground dependencies:", error.message);
    console.log('   Please run "cd playground && pnpm install" manually.');
  }

  console.log("\n🎉 Setup complete!");
  console.log("\nNext steps:");
  console.log("1. Start the playground: pnpm run playground");
  console.log(
    "2. Open http://localhost:" + playgroundPort + " in your browser"
  );
  console.log("3. Start analyzing your repositories! 🚀\n");

  rl.close();
}

// Handle Ctrl+C
process.on("SIGINT", () => {
  console.log("\n\nSetup cancelled.");
  rl.close();
  process.exit(0);
});

setup().catch((error) => {
  console.error("❌ Setup failed:", error.message);
  rl.close();
  process.exit(1);
});
